@Library('jenkins_shared_lib') _

pipeline {
    agent any
    
    tools {
        maven 'maven3'
    }

    parameters{
        choice(name: 'action', choices: 'create\ndelete', description: 'Choose create/destroy')
        string(name: 'aws_account_id', description: "Aws account id", defaultValue: '744531651118')
        string(name: 'region', description: "name of the ecr-region", defaultValue: 'ap-south-1')
        string(name: 'ecr_repo_name', description: "name of ecr repo", defaultValue: 'complete-cicd-java-application')
    }

    environment {
        ACCOUNT_ID = '744531651118'
        DEFAULLT_REGION = 'ap-south-1'
        IMAGE_REPO_NAME = 'complete-cicd-java-application'
        IMAGE_TAG = '${BUILD_NUMBER}'
        REPOSITORY_URI = "${ACCOUNT_ID}.dkr.ecr.${DEFAULLT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}"
    }

    stages{
        
        stage('Workspace cleanup'){
          when {expression{params.action == 'create'}}

            steps{
                cleanWs()
            }
        }

        stage('Git Checkout'){
            when {expression{params.action == 'create'}}

            steps{
                gitCheckout(
                    branch: "main",
                    url: "https://github.com/nrjydv1997/complete-cicd-java-application.git"
                )
            }
        }
/*
        stage('Unit test maven'){
         when {expression{params.action == 'create'}}

            steps{
                 mvnTest()
            }
        }

        stage('Maven Integration Test'){
         when {expression{params.action == 'create'}}

            steps{
                 mvnIntegrationTest()
            }
        }


        stage('Static code analysis'){
          when {expression{params.action == 'create'}} 
            steps{
                script{
                    def SonarQubeCredentialsId = 'sonar-api'
                    staticCodeAnalysis(SonarQubeCredentialsId)
                
                }
            }
        }

        stage('Quality Gate Status'){
          when {expression{params.action == 'create'}} 
            steps{
                script{
                    def SonarQubeCredentialsId = 'sonar-api'
                    qualityGateStatus(SonarQubeCredentialsId)
                
                }
            }
        }

        stage('Maven Build'){
          when {expression{params.action == 'create'}} 
            steps{
                script{
                    mvnBuild()
                }
            }
        }
*/
        stage('Docker Image Build: ECR'){
          when {expression{params.action == 'create'}} 
            steps{
                script{
                    sh "aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 744531651118.dkr.ecr.ap-south-1.amazonaws.com"
                }
            }
        }
        stage('Docker Image Build: ECR'){
          when {expression{params.action == 'create'}} 
            steps{
                script{
                    //dockerBuildECR("${params.aws_account_id}","${params.region}","${params.ecr_repo_name}")
                    docker build -t ${REPOSITORY_URI} .
                }
            }
        }
/*
        stage('Docker Image Scan: ECR'){
          when {expression{params.action == 'create'}} 
            steps{
                script{
                    dockerImageScanECR("${params.aws_account_id}","${params.region}","${params.ecr_repo_name}")
                }
            }
        }
*/
        stage('Docker Image Push: ECR'){
          when {expression{params.action == 'create'}} 
            steps{
                script{
                    //dockerPushECR("${params.aws_account_id}","${params.region}","${params.ecr_repo_name}")
                    docker push 744531651118.dkr.ecr.ap-south-1.amazonaws.com/complete-cicd-java-application:latest
                }
            }
        }
    }
}
